- Basics of an HTTP Server
    -> Client / Server
    -> Request / Response
    -> Header / Body
    -> Configuration File
    -> CGI
    -> I/O Multiplexing / FD handling

- EPOLL
    -> why we use it
    -> how it works

- How to accept client requests
- How we send responses to client

"only one read or one write per client per epoll"

-> If error when error during a read/recv/write/send on a socket, client is removed
-> checking only if ret == 0 && ret == -1

-> no check of errno


Config file 1 : multiple servers with different port -> ok
Config file 2 : multiple servers with different hostname (curl -resolve to test) -> TODO
Config file 3 : setup default error page
Config file 4 : client max body size (test with body > / = / <)
Config file 5 : routes in a server to different directories
Config file 6 : default file to search if asked for a directory
Config file 7 : accepted methods for a route (delete file with and without permission)
Config file 8 : multiple ports and different websites
Config file 9 : same port multiple times (SHOULD NOT WORK)

-> Multiple servers at the same time with different config but common ports

telnet / curl scripts
-> GET
-> POST
-> DELETE
-> OTHER REQUESTS (should not produce any crash)

upload / download script

Browser tests (Firefox)
-> Fully static website
-> wrong url
-> list a directory
-> redirected url

Siege
-> availability > 99.5% for a get on an empty page (siege -b)
-> use it indefinetely without restarting the server

Memory leaks
-> valgring

Hanging connection