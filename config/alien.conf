
# The first server for a host:port will be the default for this host:port (meaning
# it will answer to all request that doesn’t belong to an other server)

server {
# choose the port and host of each "server"
	listen 127.0.0.0:8080;
# setup the server_names or not
	server_name default_server_name;

# setup default error pages
	error_page 400  /tmp/www/400.html;
    error_page 405  /tmp/www/400.html;
    error_page 404  /tmp/www/404_2.html;
# limit client body size
	client_max_body_size 100M;


#setup routes with one or multiple of the following rules/configuration (routes
#wont be using regexp):

# define a list of accepted HTTP Methods for the route
    location / {
        methods GET POST DELETE;
    }
# define an HTTP redirection. ??
	location / {
			return 301 http://$host$request_uri;
	}
# define a directory or a file from where the file should be search (for example
#if url /kapouet is rooted to /tmp/www, url /kapouet/pouic/toto/pouet is
#/tmp/www/pouic/toto/pouet)
	root            /tmp/www;
#turn on or off directory listing
	location /tmp/www {
		autoindex on;
	}
# default file to answer if the request is a directory
	index           index.html;
# If a request ends with a slash, NGINX treats it as a request for a directory and tries to find an index file in the directory. The index directive defines the index file’s name (the default value is index.html). To continue with the example, if the request URI is /images/some/path/, NGINX delivers the file /www/data/images/some/path/index.html if it exists. If it does not, NGINX returns HTTP code 404 (Not Found) by default. To configure NGINX to return an automatically generated directory listing instead, include the on parameter to the autoindex directive:

# execute CGI based on certain file extension (for example .php)
# · Because you won’t call the CGI directly use the full path as PATH_INFO

# · Just remembers that for chunked request, your server needs to unchunked it and the CGI will expect EOF as end of the body.
# · Same things for the output of the CGI. if no content_length is returned
# from the CGI, EOF will mean the end of the returned data.
# · Your program should call the cgi with the file requested as first argument
# · the cgi should be run in the correct directory for relativ path file access
# · your server should work with one CGI (php-cgi, python...)

# make the route able to accept uploaded files and configure where it should
# be saved
}